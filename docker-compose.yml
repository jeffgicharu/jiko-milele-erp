version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jiko-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jiko_milele_db}
      POSTGRES_USER: ${POSTGRES_USER:-jiko_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-jiko_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-jiko_user} -d ${POSTGRES_DB:-jiko_milele_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache and Message Queue
  redis:
    image: redis:7-alpine
    container_name: jiko-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: jiko-backend
    restart: unless-stopped
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-jiko_user}:${POSTGRES_PASSWORD:-jiko_password}@postgres:5432/${POSTGRES_DB:-jiko_milele_db}
      - REDIS_URL=redis://redis:6379/0
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_static:/app/static
      - backend_media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: jiko-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Celery Worker (for background tasks)
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: jiko-celery
    restart: unless-stopped
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-jiko_user}:${POSTGRES_PASSWORD:-jiko_password}@postgres:5432/${POSTGRES_DB:-jiko_milele_db}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A jiko_backend worker --loglevel=info

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local

networks:
  default:
    name: jiko-network